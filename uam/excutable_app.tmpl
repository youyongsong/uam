#!{{ python_path }}
# -*- coding: utf-8 -*-
import os
import json
import sys
from sys import platform
import subprocess
import uuid

import docker
import dockerpty
import netifaces as ni


def resolve_path(path):
    return os.path.expandvars(os.path.expanduser(path))


client = docker.from_env()
docker_kwargs = docker.utils.kwargs_from_env()
docker_kwargs['version'] = 'auto'
raw_client = docker.APIClient(**docker_kwargs)

meta_labels = {
    {% for k, v in meta_labels.items() %}
    '{{ k }}': '{{ v }}',
    {% endfor %}
    'app': '{{ app.source_type}}::{{ app.source }}',
}

try:
    client.images.get('{{ app.image }}')
except docker.errors.ImageNotFound:
    print('docker image {} not found locally, trying to pull it...'.format('{{ app.image }}'))
    print('docker pull {{ app.image }}')
    subprocess.run('docker pull {{ app.image }}', shell=True, check=True)

try:
    client.networks.get('{{ network }}')
except docker.errors.NotFound:
    print('network {{ network }} not found, creating it now ...')
    client.networks.create('{{ network }}', driver="bridge",
                           labels=meta_labels)

# default options
options = {
    'version': client.api._version,
    'auto_remove': True,
    'tty': True,
    'pid_mode': 'host',
    'privileged': True,
    'stdin_open': True,
    'name': f'uam-{uuid.uuid4()}',
}



# app related options
options['image'] = '{{ app.image }}'
options['environment'] = {{ app.environments }}
options['entrypoint'] = '{{ entrypoint.container_entrypoint }}'
options['command'] = '{{ entrypoint.container_arguments }}'

options['volumes'] = {}
{% for v in volumes %}
volume_labels = {
    'mount_path': '{{ v.path }}'
}
try:
    vol = client.volumes.get('{{ v.name }}')
except docker.errors.NotFound:
    vol = client.volumes.create(name='{{ v.name }}',
                                labels={**meta_labels, **volume_labels})
options['volumes'][vol.name] = {
    'bind': '{{ v.path }}',
    'mode': 'rw'
}
{% endfor %}

{% for c in configs %}
host_path = resolve_path('{{ c.host_path }}')
options['volumes'][host_path] = {
    'bind': '{{ c.container_path }}',
    'mode': 'rw'
}
{% endfor %}


# environment related options
cur_path = os.path.abspath(os.getcwd())
options['volumes'][cur_path] = {
    'bind': os.path.join('/uam', os.path.basename(cur_path)),
    'mode': 'rw'
}

options['working_dir'] = os.path.join('/uam', os.path.basename(cur_path))

if platform == "linux" or platform == "linux2":
    options['network_mode'] = 'host'
else:
    options['network'] = '{{ network }}'

if platform == 'darwin':
    local_ip = None
    if ni.AF_INET in ni.ifaddresses('en1'):
        local_ip = ni.ifaddresses('en1')[ni.AF_INET][0]['addr']
    else if ni.AF_INET in ni.ifaddresses('en0'):
        local_ip = ni.ifaddresses('en0')[ni.AF_INET][0]['addr']
    options['extra_hosts'] = {'localhost': local_ip}


# command args related options
args = sys.argv
args.pop(0)
if platform != "linux" and platform != "linux2":
    while '--uam-port' in args:
        idx = args.index('--uam-port')
        args.pop(idx)
        try:
            port = args.pop(idx).split(':')
            if len(port) == 1:
                host_port = container_port = port[0]
            else:
                host_port, container_port = port[:2]
            if 'ports' not in options:
                options['ports'] = {}
            options['ports'][container_port] = host_port
        except IndexError:
            pass
options['command'] = options['command'] + ' ' + ' '.join(args)

# add lables to container
options['labels'] = {
    **meta_labels,
    **{
        'command': options['entrypoint'] + ' ' + options['command']
    }
}


container = raw_client.create_container(
    **docker.models.containers._create_container_args(options))
dockerpty.start(raw_client, container)
